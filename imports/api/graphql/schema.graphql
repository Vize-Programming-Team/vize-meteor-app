type Query {
	say: String!
	currentUser: User

	allComments: [Comment!]!
	allCompanies: [Company!]!
	allJobAds: [JobAd!]!
	allReviews: [Review!]!
	allSalaries: [Salary!]!
	allUsers: [User!]!
	allVotes: [Vote!]!

	comment(id: ID!): Comment
	company(id: ID!): Company
	jobAd(id: ID!): JobAd
	review(id: ID!): Review
	salary(id: ID!): Salary
	user(id: ID!): User
	vote(id: ID!): Vote
}

"The kinds of things that can be commented on."
union CommentParent = Comment | Review

type Comment {
	id: ID!

	"What was said in this comment."
	content: String!
	"The date and time this was created."
	created: Date!

	"The user who wrote this."
	author: User!
	"The thing this comment is about or the comment that this one is responding to."
	parent: CommentParent!
	"Responses to this comment."
	children: [Comment!]!
}

type Company {
	id: ID!

	"Reviews about this company."
	reviews: [Review!]!
	"Advertisements for jobs at this company."
	jobAds: [JobAd!]!
}

type JobAd {
	id: ID!

	"The date and time this was created."
	created: Date!

	"The company that is hiring."
	company: Company!
}

type Review {
	id: ID!

	title: String!
	locations: [String!]!
	jobTitle: String!
	numberOfMonthsWorked: Int!
	pros: String!
	cons: String!
	wouldRecommendToOtherJobSeekers: Boolean!
	additionalComments: String
	"The date and time this was created."
	created: Date!
	upvotes: Int!
	downvotes: Int!

	"The user who wrote this."
	author: User!
	"The company being reviewed"
	company: Company!
	"Comments about this review."
	comments: [Comment!]!
}

type Salary {
	id: ID!

	"The date and time this was created."
	created: Date!

	"The user who submitted this."
	author: User!
	"The company that paid this salary."
	company: Company!
}

"The roles a user can play."
enum UserRole {
	WORKER
	COMPANY
	COMPANY_UNVERIFIED
}

type User {
	id: ID!
	"The user's username, as would be typed in the login field."
	username: String!

	"The user's role."
	role: UserRole!
	"The date and time this was created."
	created: Date!

	"The company that this user is administering. Will be null if this user does not or can not admin a company."
	company: Company
	"Reviews written by this user. Will be null if this user cannot write reviews."
	reviews: [Review!]
	"Comments written by this user."
	comments: [Comment!]!
	"Votes cast by this user."
	votes: [Vote!]!
}

"The kinds of things that can be voted on."
union VoteSubject = Comment | Review

type Vote {
	id: ID!

	"True if this vote is positive or favorable."
	isUpvote: Boolean!

	"The user who cast this vote."
	author: User!
	"The thing voted on."
	subject: VoteSubject!
}

scalar Date
